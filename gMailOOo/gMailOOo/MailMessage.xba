<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="MailMessage" script:language="StarBasic">REM  *****  BASIC  *****

Option Explicit

Private bMailBodyAsHtml As Boolean
Private sMailBody As String
Private mMailAttachments() As Object


Function Attachment_getTransferData(oFlavor) As any
	If oFlavor.MimeType = GetAttachmentType() Then
      	Attachment_getTransferData() = GetAttachmentContent()
   End If
End Function


Function Attachment_getTransferDataFlavors()
Dim oFlavor As New com.sun.star.datatransfer.DataFlavor
	oFlavor.MimeType = GetAttachmentType()
	oFlavor.HumanPresentableName = GetAttachmentType()
	Attachment_getTransferDataFlavors() = Array(oFlavor)
End Function


Function Attachment_isDataFlavorSupported(oFlavor As Object) As Boolean
   Attachment_isDataFlavorSupported() = (oFlavor.MimeType = GetAttachmentType())
End Function


Function Body_getTransferDataFlavors() As Any
Dim oFlavor As New com.sun.star.datatransfer.DataFlavor
	If bMailBodyAsHtml Then
		oFlavor.MimeType = &quot;text/html;charset=utf-8&quot;
		oFlavor.HumanPresentableName = &quot;HTML-Documents&quot;
	Else
		oFlavor.MimeType = &quot;text/plain;charset=utf-16&quot;
		oFlavor.HumanPresentableName = &quot;Unicode text&quot;
	End If
	Body_getTransferDataFlavors() = Array(oFlavor)
End Function


Function Body_getTransferData(oFlavor) As any
	If (oFlavor.MimeType = &quot;text/plain;charset=utf-16&quot;) Or (oFlavor.MimeType = &quot;text/html;charset=utf-8&quot;) Then
		Body_getTransferData() = sMailBody
	End If
End Function


Function Body_isDataFlavorSupported(x As Object) As Boolean
	Body_isDataFlavorSupported() = (x.MimeType = &quot;text/plain;charset=utf-16&quot;) Or (x.MimeType = &quot;text/html;charset=utf-8&quot;)
End Function


Function CheckAttachments(mUrls As Object) As Boolean
Dim oService As Variant
Dim oUrl As New com.sun.star.util.URL
Dim nSize As Long
Dim nMax As Long
	nMax = 5 * 1024 * 1024
	oService = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	For Each oUrl in mUrls
		LogTxt(&quot;Check attachment &quot;&quot;&quot; &amp; ConvertFromUrl(oUrl.Main) &amp; &quot;&quot;&quot;: &quot;)
		If Not oService.exists(oUrl.Main) Then
			LogTxt(&quot;Error!!! Cannot find attached File&quot;, False)
			Exit Function
		End If
		nSize = oService.getSize(oUrl.Main)
		If nSize = 0 Or nSize &gt; nMax Then
			LogTxt(&quot;Error!!! Attached File has not a valid size!!!&quot;, False)
			Exit Function
		End If
		LogTxt(&quot;Ok&quot;, False)
	Next oUrl
   	CheckAttachments() = True
End Function


Function GetAttachment(oUrl As com.sun.star.util.URL) As Object
Dim oAttachment As Object
	oAttachment = CreateObject(&quot;com.sun.star.mail.MailAttachment&quot;)
	oAttachment.Data = CreateUNOListener(&quot;Attachment_&quot;, &quot;com.sun.star.datatransfer.XTransferable&quot;)
	oAttachment.ReadableName = ConvertFromUrl(oUrl.Name)
	GetAttachment() = oAttachment
End Function


Function GetAttachmentContent() As Object
Dim oService As Variant
Dim oFile As Object
Dim oUrl As Object
Dim mData() As Byte
	oUrl = GetAttachmentUrl(True)
	oService = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	oFile = oService.OpenFileRead(oUrl.Main)
	oFile.ReadBytes(mData(), oService.getSize(oUrl.Main))
	oFile.CloseInput
   	GetAttachmentContent() = CreateUnoValue(&quot;[]byte&quot;, mData())
End Function


Function GetAttachmentType() As String
Dim oUrl As Object
	oUrl = GetAttachmentUrl(False)
	GetAttachmentType() = ConvertFromUrl(oUrl.Arguments)
End Function


Function GetAttachmentUrl(bMark As Boolean) As com.sun.star.util.URL
Dim oUrl As New com.sun.star.util.URL
	For Each oUrl in mMailAttachments()
		If oUrl.Mark &lt;&gt; &quot;Done&quot; Then
			If bMark Then
				oUrl.Mark = &quot;Done&quot;
			End If
			GetAttachmentUrl() = oUrl
			Exit Function
		End If
	Next oUrl
End Function


Function GetMailAttachments() As Any
Dim mUrls() As Object
Dim sUrl As String
Dim i As Integer
	If HasAttachments() Then
		ReDim mUrls(GetAttachmentsCount())
	End If
	If SendAsAttachment() Then
		ExportForAttachment()
		mUrls(i) = GetUrlFromString(GetExportAttachmentUrl())
		i = i + 1
	End If
	For Each sUrl in GetAttachments()
		mUrls(i) = GetUrlFromString(ConvertToUrl(sUrl))
		i = i + 1
	Next sUrl
	GetMailAttachments() = mUrls()
End Function


Sub SendMailMessage(sTo As String, _
					sFrom As String, _
					sSubject As String, _
					oBody As Object)
Dim oMail As Object
Dim oUrl As Object
	oMail = com.sun.star.mail.MailMessage.create(sTo, sFrom, sSubject, oBody)
	For Each oUrl in mMailAttachments
		oMail.addAttachment(GetAttachment(oUrl))
	Next oUrl
	GetSmtpService().SendMailMessage(oMail)
	For Each oUrl in mMailAttachments
		oUrl.Mark = &quot;&quot;
	Next oUrl
End Sub


Function SetMailAttachments() As Boolean
Dim mUrls() As Object
	mUrls() = GetMailAttachments()
	If CheckAttachments(mUrls) Then
		SetMailAttachmentsType(mUrls)
		mMailAttachments = mUrls
		SetMailAttachments() = True
	End If
End Function


Sub SetMailAttachmentsType(mUrls As Object)
Dim oDetection As Variant
Dim oUrl As New com.sun.star.util.URL
Dim sType As String
Dim mTypes() As Object
Dim oType As Object
	oDetection = CreateUnoService(&quot;com.sun.star.document.TypeDetection&quot;)
	For Each oUrl in mUrls
		oUrl.Arguments = &quot;application/octet-stream&quot;
		sType = oDetection.queryTypeByUrl(oUrl.Main)
		If oDetection.hasByName(sType) Then
			mTypes() = oDetection.getByName(sType)
			For Each oType in mTypes
				If oType.Name = &quot;MediaType&quot; Then
					oUrl.Arguments = oType.Value
				End If
			Next oType
		End If
	Next oUrl
End Sub


Function SetMailBody(sBody As String , _
					 bBodyAsHtml As Boolean)
	sMailBody = sBody
	bMailBodyAsHtml = bBodyAsHtml
	SetMailBody() = CreateUNOListener(&quot;Body_&quot;, &quot;com.sun.star.datatransfer.XTransferable&quot;)
End Function

</script:module>